name: Docker Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  docker-test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.ci
        push: false
        tags: pet-app:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create docker-compose.test.yml
      run: |
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        
        services:
          app:
            image: pet-app:ci-test
            container_name: pet-app-test
            working_dir: /var/www/html
            environment:
              - APP_ENV=testing
              - DB_CONNECTION=sqlite
              - DB_DATABASE=/var/www/html/database/database.sqlite
              - CACHE_STORE=array
              - QUEUE_CONNECTION=sync
              - SESSION_DRIVER=array
              - MAIL_MAILER=array
              - REDIS_HOST=redis
            depends_on:
              - redis
            networks:
              - pet-app-network
            command: php-fpm
        
          nginx:
            image: nginx:alpine
            container_name: pet-app-nginx-test
            ports:
              - "8000:80"
            volumes:
              - ./:/var/www/html
              - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
            depends_on:
              - app
            networks:
              - pet-app-network
        
          redis:
            image: redis:7-alpine
            container_name: pet-app-redis-test
            ports:
              - "6379:6379"
            networks:
              - pet-app-network
        
        networks:
          pet-app-network:
            driver: bridge
        EOF

    - name: Start services
      run: docker compose -f docker-compose.test.yml up -d

    - name: Wait for services to be ready
      run: |
        # Wait for nginx to be ready
        timeout 60 bash -c 'until curl -f http://localhost:8000; do sleep 2; done'
        
        # Wait for Redis to be ready
        timeout 30 bash -c 'until docker compose -f docker-compose.test.yml exec redis redis-cli ping; do sleep 2; done'

    - name: Setup database and run tests
      run: |
        # Create SQLite database
        docker compose -f docker-compose.test.yml exec app touch /var/www/html/database/database.sqlite
        
        # Run database migrations
        docker compose -f docker-compose.test.yml exec app php artisan migrate --force
        
        # Run database seeders
        docker compose -f docker-compose.test.yml exec app php artisan db:seed --force
        
        # Run all tests
        docker compose -f docker-compose.test.yml exec app php artisan test
        
        # Run specific test suites
        docker compose -f docker-compose.test.yml exec app php artisan test --testsuite=Unit
        docker compose -f docker-compose.test.yml exec app php artisan test --testsuite=Feature

    - name: Test application endpoints
      run: |
        # Test main page
        curl -f http://localhost:8000 || exit 1
        
        # Test API endpoints if they exist
        # curl -f http://localhost:8000/api/pets || echo "API endpoint not available"

    - name: Check application logs
      run: |
        docker compose -f docker-compose.test.yml logs app
        docker compose -f docker-compose.test.yml logs nginx

    - name: Clean up
      if: always()
      run: docker compose -f docker-compose.test.yml down -v

  docker-security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.ci
        push: false
        tags: pet-app:security-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'pet-app:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
