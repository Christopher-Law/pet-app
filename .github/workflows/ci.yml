name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  APP_ENV: testing
  DB_CONNECTION: sqlite
  DB_DATABASE: ":memory:"
  CACHE_STORE: array
  QUEUE_CONNECTION: sync
  SESSION_DRIVER: array
  MAIL_MAILER: array

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, dom, fileinfo, mysql, sqlite, redis, gd, zip, bcmath, pcntl, exif

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Create SQLite database
      run: touch database/database.sqlite

    - name: Run database migrations
      run: php artisan migrate --force

    - name: Run database seeders
      run: php artisan db:seed --force

    - name: Execute tests (Unit and Feature tests)
      run: php artisan test

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, dom, fileinfo, mysql, sqlite, redis, gd, zip, bcmath, pcntl, exif

    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

    - name: Run Laravel Pint (Code Style)
      run: ./vendor/bin/pint --test

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: pet-app:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Start the application with Docker Compose
        docker-compose up -d --build
        
        # Wait for services to be ready
        sleep 30
        
        # Test if the application is responding
        curl -f http://localhost:8000 || exit 1
        
        # Run tests inside the container
        docker-compose exec -T app php artisan test
        
        # Clean up
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, dom, fileinfo, mysql, sqlite, redis, gd, zip, bcmath, pcntl, exif

    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

    - name: Run security audit
      run: composer audit

    - name: Run Laravel Security Check
      run: |
        if command -v security-checker &> /dev/null; then
          security-checker security:check composer.lock
        else
          echo "Security checker not available, skipping Laravel security check"
        fi
